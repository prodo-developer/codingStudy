package com.programers.week4;

public class StillTest {

    /**
     * 값을 저장할 dp배열을 2개 생성 [처음 집을 훔치는 경우, 처음 집을 훔치지 않는 경우]
     * 점화식 : di[i] = max(dp[i-2] + money[i], dp[i-1]);
     * 고려해야 할 점
     * 시작지점에서 0번째 집을 훔칠 것인지, 1번째 집을 훔칠것인지 고려해서 두가지의 MAX를 구해야 합니다.
     */

    public int solution(int[] money) {
        int moneyLength = money.length;
        // dp배열은 처음 집을 훔치기때문에 인
        // 접한 마지막 집은 훔칠수 없으므로 반복문은 length-1 전까지만
        int[] dp = new int[moneyLength-1];
        // 처음 집 안 훔칠 때
        int[] dp2 = new int[moneyLength];

        // dp[0]과 dp[1]은 0번째 집부터 1번째 집까지 가장 많이 훔칠수 있는 금액인데 0번집을 훔치기때문에
        // 1번째 집은 훔칠수 없게 되고 dp[1]까지의 가장큰 금액은 첫번째 집을 훔친 경우이므로 dp[0],dp[1]에는 0번 집의 돈을 넣어 줬습니다.
        dp[0] = money[0];
        dp[1] = money[0];
        dp2[2] = 0;
        dp2[1] = money[1];

        // 반복문을 돌면서 두번째 전의 최대 돈에 현재 번째 집의 돈을 합친것과 이전의 최대 돈을 비교하여 dp배열을 채웁니다.
        // 2가지 경우를 각각 money 배열의 인덱스만큼 왔을 때 누적시킨 dp값들의 max 값을 구하여 메모제이션 해줌
        for (int i = 2; i < moneyLength-1; i++) {
            dp[i]=Math.max(dp[i-2]+money[i],dp[i-1]);
        }

        // dp2는 첫번째 집에서는 돈을 훔치지 않으므로 반복문은 length까지 돌렸습니다.
        for(int i=2; i<moneyLength; i++) {
            dp2[i]=Math.max(dp2[i-2]+money[i],dp2[i-1]);
        }

        // dp와 dp2의 마지막 값을 비교하여 더 큰값을 출력 하여 정답을 구하였습니다.
        return Math.max(dp[moneyLength-2],dp2[moneyLength-1]);
    }

    public static void main(String[] args) {
        int[] money = {1,2,3,1};

        System.out.println(new StillTest().solution(money));
    }
}
